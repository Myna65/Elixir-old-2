-- MySQL Script generated by MySQL Workbench
-- Wed 11 Feb 2015 06:38:36 PM CET
-- Model: New Model    Version: 1.0
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema elixir
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `elixir` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `elixir` ;

-- -----------------------------------------------------
-- Table `elixir`.`civility`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`civility` (
  `id` INT NOT NULL,
  `name` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`person`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`person` (
  `id` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `surname` VARCHAR(45) NULL DEFAULT '',
  `vat_number` VARCHAR(20) NULL DEFAULT NULL,
  `civility_id` INT NOT NULL,
  `mandator_id` INT NULL,
  `comment` TEXT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_person_civility1_idx` (`civility_id` ASC),
  INDEX `name_index` (`name` ASC),
  UNIQUE INDEX `vat_number_UNIQUE` (`vat_number` ASC),
  INDEX `fk_person_person1_idx` (`mandator_id` ASC),
  CONSTRAINT `fk_person_civility1`
    FOREIGN KEY (`civility_id`)
    REFERENCES `elixir`.`civility` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_person1`
    FOREIGN KEY (`mandator_id`)
    REFERENCES `elixir`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`credential`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`credential` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(10) NOT NULL,
  `password` VARCHAR(40) NOT NULL,
  `person_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC),
  INDEX `fk_credential_person_idx` (`person_id` ASC),
  UNIQUE INDEX `person_id_UNIQUE` (`person_id` ASC),
  CONSTRAINT `fk_credential_person`
    FOREIGN KEY (`person_id`)
    REFERENCES `elixir`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`person`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`person` (
  `id` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `surname` VARCHAR(45) NULL DEFAULT '',
  `vat_number` VARCHAR(20) NULL DEFAULT NULL,
  `civility_id` INT NOT NULL,
  `mandator_id` INT NULL,
  `comment` TEXT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_person_civility1_idx` (`civility_id` ASC),
  INDEX `name_index` (`name` ASC),
  UNIQUE INDEX `vat_number_UNIQUE` (`vat_number` ASC),
  INDEX `fk_person_person1_idx` (`mandator_id` ASC),
  CONSTRAINT `fk_person_civility1`
    FOREIGN KEY (`civility_id`)
    REFERENCES `elixir`.`civility` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_person_person1`
    FOREIGN KEY (`mandator_id`)
    REFERENCES `elixir`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`contact_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`contact_type` (
  `id` INT NOT NULL,
  `name` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`contact`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`contact` (
  `id` INT NOT NULL,
  `value` VARCHAR(45) NOT NULL,
  `contact_type_id` INT NOT NULL,
  `person_id` INT NOT NULL,
  PRIMARY KEY (`id`, `contact_type_id`),
  INDEX `fk_contact_contact_type1_idx` (`contact_type_id` ASC),
  INDEX `fk_contact_person1_idx` (`person_id` ASC),
  CONSTRAINT `fk_contact_contact_type1`
    FOREIGN KEY (`contact_type_id`)
    REFERENCES `elixir`.`contact_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_contact_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `elixir`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`land`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`land` (
  `id` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `code` VARCHAR(2) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`zip`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`zip` (
  `id` INT NOT NULL,
  `number` VARCHAR(45) NOT NULL,
  `land_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_zip_land1_idx` (`land_id` ASC),
  CONSTRAINT `fk_zip_land1`
    FOREIGN KEY (`land_id`)
    REFERENCES `elixir`.`land` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`city`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`city` (
  `id` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `zip_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_city_zip1_idx` (`zip_id` ASC),
  CONSTRAINT `fk_city_zip1`
    FOREIGN KEY (`zip_id`)
    REFERENCES `elixir`.`zip` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`address` (
  `id` INT NOT NULL,
  `street` VARCHAR(45) NULL,
  `number` VARCHAR(45) NULL,
  `box` VARCHAR(45) NULL,
  `city_id` INT NOT NULL,
  `person_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_address_city1_idx` (`city_id` ASC),
  INDEX `fk_address_person1_idx` (`person_id` ASC),
  CONSTRAINT `fk_address_city1`
    FOREIGN KEY (`city_id`)
    REFERENCES `elixir`.`city` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_address_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `elixir`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`bank`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`bank` (
  `id` INT NOT NULL,
  `BIC` VARCHAR(11) NOT NULL,
  `person_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_bank_person1_idx` (`person_id` ASC),
  CONSTRAINT `fk_bank_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `elixir`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`account`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`account` (
  `id` INT NOT NULL,
  `IBAN` VARCHAR(34) NOT NULL,
  `bank_id` INT NOT NULL,
  `person_id` INT NOT NULL,
  PRIMARY KEY (`id`, `bank_id`),
  INDEX `fk_account_bank1_idx` (`bank_id` ASC),
  INDEX `fk_account_person1_idx` (`person_id` ASC),
  CONSTRAINT `fk_account_bank1`
    FOREIGN KEY (`bank_id`)
    REFERENCES `elixir`.`bank` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_account_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `elixir`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`journal`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`journal` (
  `id` INT UNSIGNED NOT NULL,
  `type` ENUM('cash','electronic','check') NOT NULL,
  `current_amount` DECIMAL NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`document`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`document` (
  `id` INT NOT NULL,
  `time` TIMESTAMP NOT NULL,
  `term_time` DATE NULL,
  `amount` DECIMAL NOT NULL,
  `vat_amount` VARCHAR(45) NOT NULL,
  `person_id` INT NOT NULL,
  `internal_ref` VARCHAR(45) NOT NULL,
  `extrenal_ref` VARCHAR(45) NULL,
  `type` ENUM('invoice','creditnote','sale','return') NOT NULL,
  `comment` TEXT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_document_person1_idx` (`person_id` ASC),
  CONSTRAINT `fk_document_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `elixir`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`payement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`payement` (
  `Document_id` INT NOT NULL,
  `journal_id` INT NOT NULL,
  `value` DECIMAL NOT NULL,
  `time` DATETIME NOT NULL,
  `comment` TEXT NULL,
  INDEX `fk_document_has_journal_journal1_idx` (`journal_id` ASC),
  INDEX `fk_document_has_journal_document1_idx` (`Document_id` ASC),
  CONSTRAINT `fk_Document_has_journal_Document1`
    FOREIGN KEY (`Document_id`)
    REFERENCES `elixir`.`document` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Document_has_journal_journal1`
    FOREIGN KEY (`journal_id`)
    REFERENCES `elixir`.`journal` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`transfer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`transfer` (
  `id` INT NOT NULL,
  `from_id` INT UNSIGNED NOT NULL,
  `to_id` INT UNSIGNED NOT NULL,
  `amount` DECIMAL NOT NULL,
  `time` DATETIME NULL,
  `comment` TEXT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_transfer_journal1_idx` (`from_id` ASC),
  INDEX `fk_transfer_journal2_idx` (`to_id` ASC),
  CONSTRAINT `fk_transfer_journal1`
    FOREIGN KEY (`from_id`)
    REFERENCES `elixir`.`journal` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transfer_journal2`
    FOREIGN KEY (`to_id`)
    REFERENCES `elixir`.`journal` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`product_category`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`product_category` (
  `id` INT NOT NULL,
  `value` VARCHAR(45) NOT NULL,
  `parent_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_product_category_product_category1_idx` (`parent_id` ASC),
  CONSTRAINT `fk_product_category_product_category1`
    FOREIGN KEY (`parent_id`)
    REFERENCES `elixir`.`product_category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`collection`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`collection` (
  `id` INT NOT NULL,
  `year` SMALLINT NOT NULL,
  `season` ENUM('spring','summer','automn','winter') NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`product`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`product` (
  `id` INT NOT NULL,
  `model` VARCHAR(45) NOT NULL,
  `article` VARCHAR(45) NOT NULL,
  `size` VARCHAR(45) NOT NULL,
  `color` VARCHAR(45) NOT NULL,
  `category_id` INT NOT NULL,
  `provider_id` INT NOT NULL,
  `collection_id` INT NOT NULL,
  `sell_price` DECIMAL NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_product_product_category1_idx` (`category_id` ASC),
  INDEX `fk_product_person1_idx` (`provider_id` ASC),
  INDEX `fk_product_collection1_idx` (`collection_id` ASC),
  CONSTRAINT `fk_product_product_category1`
    FOREIGN KEY (`category_id`)
    REFERENCES `elixir`.`product_category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_product_person1`
    FOREIGN KEY (`provider_id`)
    REFERENCES `elixir`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_product_collection1`
    FOREIGN KEY (`collection_id`)
    REFERENCES `elixir`.`collection` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`stock`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`stock` (
  `id` INT NOT NULL,
  `product_id` INT NOT NULL,
  `receive_date` DATE NOT NULL,
  `person_id` INT NOT NULL,
  `cost_price` DECIMAL NOT NULL,
  `quantity` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_stock_product1_idx` (`product_id` ASC),
  INDEX `fk_stock_person1_idx` (`person_id` ASC),
  CONSTRAINT `fk_stock_product1`
    FOREIGN KEY (`product_id`)
    REFERENCES `elixir`.`product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_stock_person1`
    FOREIGN KEY (`person_id`)
    REFERENCES `elixir`.`person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`permission`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`permission` (
  `id` INT NOT NULL,
  `role` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `role_UNIQUE` (`role` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`user_permission`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`user_permission` (
  `permission_id` INT NOT NULL,
  `credential_id` INT NOT NULL,
  INDEX `fk_permission_has_credential_credential1_idx` (`credential_id` ASC),
  INDEX `fk_permission_has_credential_permission1_idx` (`permission_id` ASC),
  PRIMARY KEY (`credential_id`, `permission_id`),
  CONSTRAINT `fk_permission_has_credential_permission1`
    FOREIGN KEY (`permission_id`)
    REFERENCES `elixir`.`permission` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_permission_has_credential_credential1`
    FOREIGN KEY (`credential_id`)
    REFERENCES `elixir`.`credential` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`move`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`move` (
  `id` INT NOT NULL,
  `time` TIMESTAMP NOT NULL,
  `internal_ref` VARCHAR(45) NULL,
  `extrenal_ref` VARCHAR(45) NULL,
  `type` ENUM('invoice','creditnote','sale','return') NULL,
  `amount` DECIMAL NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`stock_move`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`stock_move` (
  `move_id` INT NOT NULL,
  `stock_id` INT NOT NULL,
  PRIMARY KEY (`move_id`, `stock_id`),
  INDEX `fk_move_has_stock_stock1_idx` (`stock_id` ASC),
  INDEX `fk_move_has_stock_move1_idx` (`move_id` ASC),
  CONSTRAINT `fk_move_has_stock_move1`
    FOREIGN KEY (`move_id`)
    REFERENCES `elixir`.`move` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_move_has_stock_stock1`
    FOREIGN KEY (`stock_id`)
    REFERENCES `elixir`.`stock` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`import`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`import` (
  `document_id` INT NOT NULL,
  `move_id` INT NOT NULL,
  PRIMARY KEY (`document_id`, `move_id`),
  INDEX `fk_document_has_move_move1_idx` (`move_id` ASC),
  INDEX `fk_document_has_move_document1_idx` (`document_id` ASC),
  CONSTRAINT `fk_document_has_move_document1`
    FOREIGN KEY (`document_id`)
    REFERENCES `elixir`.`document` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_document_has_move_move1`
    FOREIGN KEY (`move_id`)
    REFERENCES `elixir`.`move` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`voucher`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`voucher` (
  `id` INT NOT NULL,
  `amount` DECIMAL NULL,
  `number` INT(11) NOT NULL,
  `ticket_intro_id` INT NOT NULL,
  `ticket_out_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `number_UNIQUE` (`number` ASC),
  INDEX `fk_voucher_document1_idx` (`ticket_intro_id` ASC),
  INDEX `fk_voucher_document2_idx` (`ticket_out_id` ASC),
  CONSTRAINT `fk_voucher_document1`
    FOREIGN KEY (`ticket_intro_id`)
    REFERENCES `elixir`.`document` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_voucher_document2`
    FOREIGN KEY (`ticket_out_id`)
    REFERENCES `elixir`.`document` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `elixir`.`Printer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `elixir`.`Printer` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `type` ENUM('ticket','paper') NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
